// Debug script to simulate stage response data flow
console.log('=== STAGE RESPONSE DEBUG ===');

// Simulate the data that would come from WebSocket
const simulatedWebSocketData = {
  "type": "stage_response",
  "stageId": "ask_security_medium", 
  "responseType": "bullet",
  "prompt": "Ïè† Ïñ¥ÌîåÏóêÏÑúÎèÑ ÏßÄÍ∏à ÎßåÎì† Í≥ÑÏ¢åÎ•º ÏÇ¨Ïö©ÌïòÏã§ Ïàò ÏûàÎèÑÎ°ù ÎèÑÏôÄÎìúÎ¶¥Í≤åÏöî. Î≥¥Ïú†ÌïòÏã† Î≥¥ÏïàÎß§Ï≤¥ Îì±Î°ùÌï¥ÎìúÎ¶¥ÍπåÏöî?",
  "choices": [
    {"value": "Î≥¥Ïú†Ìïú Î≥¥ÏïàÎß§Ï≤¥ 1 (ÎãπÌñâ)", "label": "üîê Î≥¥Ïú†Ìïú Î≥¥ÏïàÎß§Ï≤¥ 1 (ÎãπÌñâ)"},
    {"value": "Î≥¥Ïú†Ìïú Î≥¥ÏïàÎß§Ï≤¥ 2 (ÌÉÄÌñâ)", "label": "üè¶ Î≥¥Ïú†Ìïú Î≥¥ÏïàÎß§Ï≤¥ 2 (ÌÉÄÌñâ)"},
    {"value": "Î≥¥ÏïàÏπ¥Îìú", "label": "üí≥ Î≥¥ÏïàÏπ¥Îìú (Ïã†Í∑ú Î∞úÍ∏â)"},
    {"value": "Ïã†ÌïúOTP (10,000Ïõê)", "label": "üì± Ïã†ÌïúOTP (10,000Ïõê)"}
  ],
  "skippable": false,
  "modifiableFields": null
};

console.log('WebSocket data:', simulatedWebSocketData);

// Simulate what chatStore would create for currentStageResponse
const currentStageResponse = {
  type: 'stage_response',
  stageId: simulatedWebSocketData.stageId,
  responseType: simulatedWebSocketData.responseType,
  prompt: simulatedWebSocketData.prompt,
  choices: simulatedWebSocketData.choices,
  skippable: simulatedWebSocketData.skippable || false,
  modifiableFields: simulatedWebSocketData.modifiableFields
};

console.log('Stage response object:', currentStageResponse);

// Simulate message object that would be added to messages array
const messageObject = {
  id: 'test-id',
  sender: 'ai',
  text: '', // Empty for stage response
  timestamp: new Date(),
  isStreaming: false,
  stageResponse: currentStageResponse
};

console.log('Message object:', messageObject);

// Test the condition that would trigger StageResponse component
console.log('=== COMPONENT RENDERING CHECKS ===');
console.log('message.stageResponse exists?', !!messageObject.stageResponse);
console.log('responseType === "bullet"?', messageObject.stageResponse.responseType === 'bullet');
console.log('choices array exists?', !!messageObject.stageResponse.choices);
console.log('choices array length:', messageObject.stageResponse.choices?.length || 0);
console.log('choices array contents:', messageObject.stageResponse.choices);

// Test individual choice rendering
if (messageObject.stageResponse.choices) {
  console.log('=== CHOICE BUTTON RENDERING ===');
  messageObject.stageResponse.choices.forEach((choice, index) => {
    console.log(`Choice ${index}:`);
    console.log(`  - choice.value: "${choice.value}"`);
    console.log(`  - choice.label: "${choice.label}"`);
    console.log(`  - key for v-for: "${choice.value}"`);
    console.log(`  - aria-label: "ÏÑ†ÌÉù: ${choice.label}"`);
    console.log(`  - button text: "${choice.label}"`);
  });
}